@use "sass:math";

$sss_grid-column-count: 12;
$sss_grid-columns: 1 2 3 4;

$sss_grid-column-queries: (
    '':                null,
    '-medium-down':    medium-down,

    '-medium':         medium-to-large,
    '-medium-up':      medium,
    '-large-down':     large-down,

    '-large-up':        large,
);

$sss_grid-column-gap-x: $grid-gap-x;
$sss_grid-column-gap-y: $grid-gap-y;

.sss_grid {
    @include ds_layout($grid-gap-x);

    @supports (display: grid) {
        grid-template-columns: repeat($sss_grid-column-count, 1fr);
        grid-row-gap: px-to-rem($sss_grid-column-gap-y);
        margin-left: 0;
    }

    &__item {
        width: 100%;

        @include ds_colwidth($sss_grid-column-count, $sss_grid-column-count);
        margin-left: px-to-rem($sss_grid-column-gap-x);
        margin-bottom: px-to-rem($sss_grid-column-gap-y);
        display: block;
        float: left;

        @supports (display: grid) {
            grid-column: span $sss_grid-column-count;
            margin-left: 0;
            margin-bottom: 0;
        }
    }

    &--flush {
        margin-left:  0;

        @supports (display: grid) {
            margin-bottom: 0;
            grid-gap: 0;
        }
    }

    &--flush &__item {
        margin-right: 0;
        margin-bottom: 0;
    }


    /* Alignment variants */
    &--top    { align-items: start; }
    &--middle { align-items: center; }
    &--bottom { align-items: end; }
}

@mixin sss_columns($columns, $breakpoint: null) {
    $column-names: ();

    @each $denominator in $columns {
        @if $denominator > $sss_grid-column-count {
            @error 'You want too many columns for the grid. The grid has #{$sss_grid-column-count} columns. You want #{$denominator}.';
        }

        @for $numenator from 1 through $denominator {
            $ratio: ceil(math.div($numenator, $denominator) * 100);
            $column-name: w-#{$ratio}#{$breakpoint};

            @if not index($column-names, $column-name) {
                $columns: floor($sss_grid-column-count * math.div($numenator, $denominator));

                %#{$column-name} {
                    width: math.div($numenator, $denominator) * 100%;

                    &.sss_grid__item {
                        @include ds_colwidth($columns, $sss_grid-column-count);

                        @supports (display:grid) {
                            grid-column: span $columns;
                        }
                    }
                }
                $column-names: append($column-names, $column-name);
            }

            .sss_w-#{$numenator}-#{$denominator}#{$breakpoint} {
                @extend %#{$column-name};
            }
        }
    }
}

@each $column-name, $column-query in $sss_grid-column-queries {
    @if $column-query {
        @include ds_media-query($column-query) {
            @include sss_columns($sss_grid-columns, $column-name);
        }
    } @else {
        @include sss_columns($sss_grid-columns, $column-name);
    }
}
